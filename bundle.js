!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){t.exports=n(6)},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"@charset \"UTF-8\";\nbody {\n  margin: auto;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal; }\n  body .main-container {\n    display: flex;\n    height: 100vh; }\n    body .main-container .filter-container {\n      width: 210px;\n      padding: 20px 10px;\n      height: 100vh;\n      background: #010008;\n      position: relative;\n      z-index: 1; }\n      @media (max-width: 561px) {\n        body .main-container .filter-container {\n          width: 100%; } }\n      body .main-container .filter-container .expand-collapse {\n        position: absolute;\n        bottom: 50px;\n        background: #004694;\n        height: 30px;\n        width: 30px;\n        border-radius: 50%;\n        text-align: center;\n        right: -15px;\n        color: #ffffff;\n        cursor: pointer; }\n        body .main-container .filter-container .expand-collapse:after {\n          content: '✓';\n          margin: 0;\n          position: absolute;\n          transform: translate(-50%, 25%); }\n    body .main-container #map {\n      width: calc(100% - 210px);\n      height: 100%;\n      /* This is where you plug in the CSS for marker animations */ }\n      @media (max-width: 561px) {\n        body .main-container #map {\n          width: 100%; } }\n      body .main-container #map #markerLayer img {\n        animation: pulse .5s infinite alternate;\n        -webkit-animation: pulse .5s infinite alternate;\n        transform-origin: center;\n        -webkit-transform-origin: center; }\n\n/* Animaitons */\n@keyframes pulse {\n  to {\n    transform: scale(0.7);\n    -webkit-transform: scale(0.7); } }\n\n@-webkit-keyframes pulse {\n  to {\n    transform: scale(0.7);\n    -webkit-transform: scale(0.7); } }\n\n.logo {\n  margin: 0 0 40px 0; }\n  .logo img {\n    max-width: 120px; }\n\n.drop-outer {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  height: calc(100vh - 100px); }\n\n.dropdown-outer label {\n  text-transform: uppercase;\n  color: #ababab;\n  font-weight: 100;\n  font-size: 12px;\n  display: flex;\n  align-items: center; }\n\n.dropdown-outer .time:before,\n.dropdown-outer .region:before,\n.dropdown-outer .topic:before {\n  content: '';\n  width: 18px;\n  height: 20px; }\n\n.custom-dropdown {\n  min-width: 180px;\n  text-align: left;\n  position: relative;\n  margin-bottom: 40px;\n  background-color: #131313;\n  color: #ffffff; }\n  @media (max-width: 561px) {\n    .custom-dropdown {\n      min-width: 100%; } }\n  .custom-dropdown:hover {\n    color: #ffffff; }\n  .custom-dropdown:focus {\n    outline: none;\n    box-shadow: none; }\n  .custom-dropdown::after {\n    margin: 0;\n    position: absolute;\n    transform: translate(-50%, 0%);\n    right: 10px;\n    top: 50%; }\n\n.dropdown-menu {\n  background-color: #171717;\n  margin: 0;\n  padding: 0;\n  border-radius: 0;\n  width: 180px;\n  height: 250px;\n  overflow-y: auto;\n  transform: translate3d(0px, 35px, 0px) !important; }\n  @media (max-width: 561px) {\n    .dropdown-menu {\n      min-width: 100%; } }\n  .dropdown-menu .dropdown-item {\n    color: #ffffff;\n    padding: 10px 20px;\n    position: relative; }\n    .dropdown-menu .dropdown-item:hover {\n      background: #00733e; }\n      .dropdown-menu .dropdown-item:hover:after {\n        content: '✓';\n        position: absolute;\n        right: 5px;\n        top: 32%;\n        transform: translate(-32%, 0%); }\n  .dropdown-menu .selected:after {\n    content: '✓';\n    position: absolute;\n    right: 5px;\n    top: 32%;\n    transform: translate(-32%, 0%); }\n\n.dropdown.show .custom-dropdown {\n  background: transparent;\n  color: #616161; }\n  .dropdown.show .custom-dropdown::after {\n    color: #ffffff;\n    transform: rotate(180deg);\n    transition: cubic-bezier(0.45, 0.05, 0.55, 0.95) 0.2s;\n    right: 15px; }\n\n/* main styles */\n.switch {\n  width: 24rem;\n  position: relative; }\n  .switch input {\n    position: absolute;\n    top: 0;\n    z-index: 2;\n    opacity: 0;\n    cursor: pointer; }\n    .switch input:checked {\n      z-index: 1; }\n    .switch input:checked + label {\n      opacity: 1;\n      cursor: default;\n      color: #00733e; }\n    .switch input:not(:checked) + label:hover {\n      opacity: 0.5; }\n  .switch label {\n    color: #ababab;\n    opacity: 0.85;\n    transition: opacity 0.25s ease;\n    cursor: pointer;\n    text-transform: uppercase; }\n  .switch .toggle-outside {\n    height: 5px;\n    border-radius: 2rem;\n    padding: 0.25rem;\n    overflow: visible;\n    transition: 0.25s ease all; }\n  .switch .toggle-inside {\n    border-radius: 5rem;\n    background: #00733e;\n    position: absolute;\n    transition: 0.25s ease all;\n    top: -4px; }\n\n.switch--horizontal {\n  width: 180px;\n  font-size: 0;\n  margin: 0;\n  margin-bottom: 1rem; }\n  .switch--horizontal input {\n    margin: 0; }\n    .switch--horizontal input:checked ~ .toggle-outside .toggle-inside {\n      left: -4px; }\n  .switch--horizontal input ~ input:checked ~ .toggle-outside .toggle-inside {\n    left: 12px; }\n  .switch--horizontal label {\n    font-size: 12px;\n    display: inline-block;\n    margin: 0;\n    text-align: center; }\n    .switch--horizontal label:last-of-type {\n      margin-left: 45px; }\n  .switch--horizontal .toggle-outside {\n    background: #ffffff;\n    position: absolute;\n    width: 25px;\n    left: 52px;\n    top: 3px; }\n  .switch--horizontal .toggle-inside {\n    height: 15px;\n    width: 15px; }\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),l=null,c=0,u=[],p=n(5);function f(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(m(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(m(r.parts[s],e));i[r.id]={id:r.id,refs:1,parts:a}}}}function d(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function h(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertAt.before,n);n.insertBefore(e,o)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function y(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return b(e,t.attrs),h(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function m(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var s=c++;n=l||(l=y(e)),r=x.bind(null,n,s,!1),o=x.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=p(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),o=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){g(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return f(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,r.push(a)}t&&f(d(t,e),e);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete i[a.id]}}}};var v,w=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join("\n")});function x(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){"use strict";n.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function o(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function i(t){return"function"==typeof t}var s=!1,a={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function l(t){setTimeout(function(){throw t})}var c={closed:!0,next:function(t){},error:function(t){if(a.useDeprecatedSynchronousErrorHandling)throw t;l(t)},complete:function(){}},u=Array.isArray||function(t){return t&&"number"==typeof t.length};function p(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}p.prototype=Object.create(Error.prototype);var f=p,d=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var t,e=!1;if(!this.closed){var n=this._parent,r=this._parents,o=this._unsubscribe,s=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var a,l=-1,c=r?r.length:0;n;)n.remove(this),n=++l<c&&r[l]||null;if(i(o))try{o.call(this)}catch(n){e=!0,t=n instanceof f?h(n.errors):[n]}if(u(s))for(l=-1,c=s.length;++l<c;){var p=s[l];if(null!==(a=p)&&"object"==typeof a)try{p.unsubscribe()}catch(n){e=!0,t=t||[],n instanceof f?t=t.concat(h(n.errors)):t.push(n)}}if(e)throw new f(t)}},t.prototype.add=function(e){var n=e;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:if(!e)return t.EMPTY;throw new Error("unrecognized teardown "+e+" added to Subscription.")}if(n._addParent(this)){var o=this._subscriptions;o?o.push(n):this._subscriptions=[n]}return n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.prototype._addParent=function(t){var e=this._parent,n=this._parents;return e!==t&&(e?n?-1===n.indexOf(t)&&(n.push(t),!0):(this._parents=[t],!0):(this._parent=t,!0))},t.EMPTY=((e=new t).closed=!0,e),t}();function h(t){return t.reduce(function(t,e){return t.concat(e instanceof f?e.errors:e)},[])}var g="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),y=function(t){function e(n,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=c;break;case 1:if(!n){i.destination=c;break}if("object"==typeof n){n instanceof e?(i.syncErrorThrowable=n.syncErrorThrowable,i.destination=n,n.add(i)):(i.syncErrorThrowable=!0,i.destination=new b(i,n));break}default:i.syncErrorThrowable=!0,i.destination=new b(i,n,r,o)}return i}return o(e,t),e.prototype[g]=function(){return this},e.create=function(t,n,r){var o=new e(t,n,r);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parent,e=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=e,this},e}(d),b=function(t){function e(e,n,r,o){var s,a=t.call(this)||this;a._parentSubscriber=e;var l=a;return i(n)?s=n:n&&(s=n.next,r=n.error,o=n.complete,n!==c&&(i((l=Object.create(n)).unsubscribe)&&a.add(l.unsubscribe.bind(l)),l.unsubscribe=a.unsubscribe.bind(a))),a._context=l,a._next=s,a._error=r,a._complete=o,a}return o(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):l(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;l(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),a.useDeprecatedSynchronousErrorHandling)throw t;l(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(l(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y);var m="function"==typeof Symbol&&Symbol.observable||"@@observable";function v(){}function w(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:v}var x=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,o=function(t,e,n){if(t){if(t instanceof y)return t;if(t[g])return t[g]()}return t||e||n?new y(t,e,n):new y(c)}(t,e,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||a.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),a.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,n=e.closed,r=e.destination,o=e.isStopped;if(n||o)return!1;t=r&&r instanceof y?r:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=T(e))(function(e,r){var o;o=n.subscribe(function(e){try{t(e)}catch(t){r(t),o&&o.unsubscribe()}},r,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[m]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:w(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=T(t))(function(t,n){var r;e.subscribe(function(t){return r=t},function(t){return n(t)},function(){return t(r)})})},t.create=function(e){return new t(e)},t}();function T(t){if(t||(t=a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var _=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return o(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return o(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(d)),S=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),E=new(function(t){function e(n,r){void 0===r&&(r=S.now);var o=t.call(this,n,function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()})||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return o(e,t),e.prototype.schedule=function(n,r,o){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,o):t.prototype.schedule.call(this,n,r,o)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(S))(_);function k(t,e){var n;return void 0===t&&(t=0),void 0===e&&(e=E),(u(n=t)||!(n-parseFloat(n)+1>=0)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=E),new x(function(n){return n.add(e.schedule(O,t,{subscriber:n,counter:0,period:t})),n})}function O(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var L=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.closed||e.complete()}};function M(t,e){return new x(e?function(n){var r=new d,o=0;return r.add(e.schedule(function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()})),r}:L(t))}var A=new x(function(t){return t.complete()});function j(t){return t?function(t){return new x(function(e){return t.schedule(function(){return e.complete()})})}(t):A}function D(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n,r=t[t.length-1];switch((n=r)&&"function"==typeof n.schedule?t.pop():r=void 0,t.length){case 0:return j(r);case 1:return r?M(t,r):function(t){var e=new x(function(e){e.next(t),e.complete()});return e._isScalar=!0,e.value=t,e}(t[0]);default:return M(t,r)}}var P=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new U(t,this.predicate,this.inclusive))},t}(),U=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.predicate=n,o.inclusive=r,o.index=0,o}return o(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(y),I=[{lat:18.637357548498635,lng:73.47500939942506},{lat:20.665129321697904,lng:75.60635705567506},{lat:21.362509373364095,lng:76.90274377442506},{lat:19.69582688556313,lng:75.58438439942506},{lat:18.554055499118373,lng:74.68350549317506},{lat:18.262179073930874,lng:73.65079064942506},{lat:20.459401448684496,lng:75.21084924317506},{lat:21.137243799768676,lng:76.77090783692506},{lat:21.198713999713558,lng:77.56192346192506},{lat:20.10903196835885,lng:76.50723596192506},{lat:19.032482089472264,lng:75.27676721192506},{lat:19.98518385604978,lng:74.66153283692506},{lat:21.198713999713558,lng:76.28750939942506},{lat:21.239679932554008,lng:74.74942346192506},{lat:21.342044933425676,lng:78.24307580567506},{lat:20.10903196835885,lng:76.04581018067506},{lat:19.032482089472264,lng:75.03506799317506},{lat:21.669131708898476,lng:75.49649377442506},{lat:20.932159252456955,lng:74.17813439942506},{lat:19.654447245004068,lng:73.65079064942506},{lat:23.62851912828723,lng:71.29147019624065},{lat:26.808478886830756,lng:73.40084519624065},{lat:24.99013854100882,lng:75.24654832124065},{lat:27.978973760891854,lng:77.44381394624065},{lat:33.19649821918532,lng:75.86178269624065},{lat:33.782889185973126,lng:77.61959519624065},{lat:30.130018099665204,lng:77.97115769624065},{lat:29.213642603076106,lng:79.28951707124065},{lat:29.06010495361493,lng:81.13522019624065},{lat:26.100297814418386,lng:80.95943894624065},{lat:26.179199166494648,lng:84.56295457124065},{lat:25.467179073782848,lng:87.72701707124065},{lat:24.750919722880088,lng:88.86959519624065},{lat:23.063658419084973,lng:86.84811082124065},{lat:21.51859490968707,lng:84.21139207124065},{lat:19.543326749788836,lng:82.71725144624065},{lat:18.629690626670534,lng:80.60787644624065},{lat:16.11347834299477,lng:78.67428269624065},{lat:13.6503616134651,lng:78.49850144624065},{lat:11.850253052705844,lng:78.41061082124065},{lat:11.07502102535199,lng:78.14693894624065},{lat:13.222938550499087,lng:76.30123582124065},{lat:15.860004098355036,lng:74.98287644624065},{lat:18.212756633097076,lng:77.79537644624065},{lat:20.287031402760892,lng:74.19186082124065},{lat:21.109200156238757,lng:80.16842332124065},{lat:21.19117027128713,lng:78.76217332124065},{lat:23.38673042004418,lng:79.37740769624065},{lat:22.90183032064072,lng:76.21334519624065},{lat:25.78416089184668,lng:78.76217332124065},{lat:25.62577513077751,lng:74.89498582124065},{lat:27.668056175065804,lng:72.78561082124065},{lat:25.62577513077751,lng:71.55514207124065},{lat:23.306035772531526,lng:71.64303269624065},{lat:24.91045039883245,lng:74.54342332124065},{lat:26.96525832021871,lng:78.14693894624065},{lat:26.96525832021871,lng:80.87154832124065},{lat:26.415582494798073,lng:82.45357957124065},{lat:26.100297814418386,lng:85.00240769624065},{lat:25.62577513077751,lng:86.14498582124065},{lat:23.225292135982656,lng:85.17818894624065},{lat:22.00834889565328,lng:84.47506394624065},{lat:22.1712269682437,lng:82.54147019624065},{lat:19.79161623092503,lng:81.75045457124065},{lat:17.37590655340455,lng:79.20162644624065},{lat:15.267331636436648,lng:79.02584519624065},{lat:18.879362529619815,lng:82.80514207124065},{lat:21.436807406874454,lng:85.26607957124065},{lat:22.820843708907834,lng:87.19967332124065},{lat:22.820843708907834,lng:87.19967332124065},{lat:22.8212778334481,lng:87.20276321330846},{lat:20.986160095497716,lng:84.43111863374065},{lat:19.667519560277427,lng:83.37643113374065},{lat:22.13052507601424,lng:85.83736863374065},{lat:20.36944799937629,lng:84.65084519624065},{lat:19.46047838327519,lng:81.57467332124065},{lat:21.845283455955656,lng:81.79439988374065},{lat:23.063658419084973,lng:83.20064988374065},{lat:23.869862274633856,lng:85.39791550874065},{lat:25.348094588038677,lng:86.40865769624065},{lat:26.21862983236515,lng:86.84811082124065},{lat:25.744584217805848,lng:83.11275925874065},{lat:25.189132773751748,lng:81.22311082124065},{lat:24.35119810736442,lng:80.87154832124065},{lat:23.869862274633856,lng:80.03658738374065},{lat:24.95030091551632,lng:77.35592332124065},{lat:24.15086153327426,lng:74.58736863374065},{lat:25.149359829859332,lng:73.57662644624065},{lat:29.48178024763136,lng:76.16939988374065},{lat:31.675914841875283,lng:77.79537644624065},{lat:27.174414700489724,lng:73.05082152557088},{lat:27.291636955591077,lng:71.07328246307088},{lat:25.8373709196693,lng:71.38089965057088},{lat:23.481282552325034,lng:72.96293090057088},{lat:22.956266873159603,lng:71.46879027557088},{lat:22.956266873159603,lng:69.75492308807088},{lat:21.736946086789594,lng:71.02933715057088},{lat:22.753791066721867,lng:72.43558715057088},{lat:23.9640655980547,lng:74.06156371307088},{lat:25.9164490707896,lng:75.24808715057088},{lat:25.361795507826923,lng:73.57816527557088},{lat:26.15336506882354,lng:75.77543090057088},{lat:28.919609924858623,lng:78.41214965057088},{lat:28.804149904894434,lng:81.75199340057088},{lat:26.665032074193558,lng:83.50980590057088},{lat:24.764687562492693,lng:85.57523558807088},{lat:25.8373709196693,lng:87.15726683807088},{lat:24.32497221715142,lng:87.90433715057088},{lat:23.602145690891643,lng:87.42093871307088},{lat:21.85935543562759,lng:86.23441527557088},{lat:20.42484866089275,lng:85.35550902557088},{lat:18.51909356678862,lng:83.20218871307088},{lat:16.7602564766832,lng:80.82914183807088},{lat:15.281957427546896,lng:79.29105590057088},{lat:11.563881296525194,lng:77.48929808807088},{lat:9.446783796693058,lng:77.04984496307088},{lat:10.528749542542373,lng:78.76371215057088},{lat:12.48795895220486,lng:76.67630980682088},{lat:14.474998171640536,lng:75.33597777557088},{lat:16.022476078325973,lng:75.07230590057088},{lat:17.934731511489982,lng:75.92923949432088},{lat:18.53992716261079,lng:78.85160277557088},{lat:17.47422942632542,lng:79.81839965057088},{lat:16.718173321874875,lng:78.17045043182088},{lat:17.26452252920528,lng:76.80814574432088},{lat:16.296834459083787,lng:76.69828246307088},{lat:15.02745538815906,lng:77.18168090057088},{lat:14.113027770232048,lng:79.31302855682088},{lat:11.972585641751623,lng:79.33500121307088},{lat:10.247787479175143,lng:78.50004027557088},{lat:13.643742636686937,lng:79.20316527557088},{lat:17.096584943836916,lng:81.51029418182088},{lat:18.227157870576036,lng:82.25736449432088},{lat:20.658359978906784,lng:76.33905232489576},{lat:20.39084798323607,lng:74.36151326239576},{lat:20.740577018549782,lng:73.79022419989576},{lat:22.96332707177883,lng:74.73504841864576},{lat:24.13159206800131,lng:76.95428669989576},{lat:23.125081454465413,lng:77.70135701239576},{lat:24.571981481040645,lng:80.33807576239576},{lat:25.15013500934939,lng:78.05291951239576},{lat:27.960323931477262,lng:78.64618123114576},{lat:29.25273830517689,lng:76.86639607489576}],R=function(){function t(){}return t.prototype.getKMLData=function(){return this.getXHRObservable("./assets/json/kml-data.json")},t.prototype.getFiltersData=function(){return this.getXHRObservable("https://asia-northeast1-agrostar-infra.cloudfunctions.net/appactivityfilters")},t.prototype.getDataPointsByFilter=function(t,e,n){var r="https://asia-northeast1-agrostar-infra.cloudfunctions.net/appactivitymarkers?month="+t;return e&&(r+="&?region="+e),n&&(r+="&?crops="+n),this.getXHRObservable(r)},t.prototype.getXHRObservable=function(t){return x.create(function(e){var n=new XMLHttpRequest;n.onreadystatechange=function(){4===this.readyState&&200===this.status&&e.next(JSON.parse(n.responseText))},n.open("GET",t,!0),n.send()})},t.prototype.getDataPoints=function(){return x.create(function(t){var e,n,r=k(10),o=!1;r.pipe((e=function(){return!o},void 0===n&&(n=!1),function(t){return t.lift(new P(e,n))})).subscribe(function(e){I[e]?t.next(I[e]):(o=!0,console.log("ENDDDDD...."))})})},t.prototype.getFilters=function(){return D([{name:"region",values:[{id:"GJ",value:"GUJARAT"}]},{name:"crops",values:[{id:"COTTON",value:"COTTON"}]}])},t}(),C=[{elementType:"geometry",stylers:[{color:"#000000"}]},{elementType:"labels",stylers:[{visibility:"off"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{elementType:"labels.text.stroke",stylers:[{color:"#212121"}]},{featureType:"administrative",elementType:"geometry",stylers:[{color:"#757575"},{visibility:"off"}]},{featureType:"administrative.country",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"administrative.land_parcel",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",elementType:"labels.text",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"administrative.neighborhood",stylers:[{visibility:"off"}]},{featureType:"administrative.province",elementType:"labels.text",stylers:[{weight:4}]},{featureType:"poi",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#181818"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"poi.park",elementType:"labels.text.stroke",stylers:[{color:"#1b1b1b"}]},{featureType:"road",stylers:[{visibility:"off"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#38414e"}]},{featureType:"road",elementType:"geometry.fill",stylers:[{color:"#2c2c2c"}]},{featureType:"road",elementType:"geometry.stroke",stylers:[{color:"#212a37"}]},{featureType:"road",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"road",elementType:"labels.text.fill",stylers:[{color:"#8a8a8a"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#373737"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#3c3c3c"}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#1f2835"}]},{featureType:"road.highway",elementType:"labels.text.fill",stylers:[{color:"#f3d19c"}]},{featureType:"road.highway.controlled_access",elementType:"geometry",stylers:[{color:"#4e4e4e"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"transit",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"geometry",stylers:[{color:"#2f3948"}]},{featureType:"transit",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#d59563"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#010927"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#3d3d3d"}]},{featureType:"water",elementType:"labels.text.stroke",stylers:[{color:"#17263c"}]}],N=function(){function t(){}return t.FUSION_TABLE_ID="19lLpgsKdJRHL2O4fNmJ406ri9JtpIIk8a-AchA",t.VISUALISATION_QUERY_URL="http://www.google.com/fusiontables/gvizdata?tq=",t.COUNTRY_NAME="India",t.MAP_STYLE_CONSTANTS=C,t}(),z=(n(1),function(){function t(t){var e=this;this.dataPointService=t,this.markers=[],this.map=new google.maps.Map(document.getElementById("map"),{center:{lat:21,lng:83},zoom:5.2,styles:N.MAP_STYLE_CONSTANTS,disableDefaultUI:!0,disableDoubleClickZoom:!0,gestureHandling:"none"}),this.dataPointService.getKMLData().subscribe(function(t){e.stateKMLData=t;for(var n=0;n<t.length;n++){var r=t[n].stateKML,o=new geoXML3.parser({map:e.map,zoom:!1,infoWindow:!1,singleInfoWindow:!0});o.parseKmlString("<Placemark>"+r+"</Placemark>"),o.docs[0].gpolygons[0].setOptions({strokeColor:"white",strokeWeight:"0.6",fillColor:"#000000",fillOpacity:.8,clickable:!1}),o.docs[0].gpolygons[0].setMap(e.map)}});var n=new google.maps.OverlayView;n.draw=function(){n.getPanes().markerLayer.id="markerLayer"},n.setMap(this.map),this.loadFiltersData(),this.dataPointService.getDataPointsByFilter("Jan-2019",null,null).subscribe(function(t){console.log(t)})}return t.prototype.loadFiltersData=function(){var t=this;this.dataPointService.getFiltersData().subscribe(function(e){if(e&&e.length){var n=e.find(function(t){return"month"===t.name}),r=e.find(function(t){return"region"===t.name}),o=e.find(function(t){return"crops"===t.name});console.log(n,r,o),n&&n.values&&n.values.length&&t.renderDropdowns("time-dropdown",n),r&&r.values&&r.values.length&&t.renderDropdowns("region-dropdown",r),o&&o.values&&o.values.length&&t.renderDropdowns("topic-dropdown",o)}})},t.prototype.renderDropdowns=function(t,e){e.values.reduce(function(t,e){return t+='\n                <a class="dropdown-event dropdown-item"\n                data-id="'+e.id+'"\n                data-value="'+e.value+'" href="javascript:void(0)">\n                '+e.value+"</a>\n            "},"")},t.prototype.getStateBounds=function(t){if(this.stateKMLData&&this.stateKMLData.length){var e=this.stateKMLData.find(function(e){return e.stateName===t});this.geoXMLObj&&this.geoXMLObj.docs[0].gpolygons[0].setMap(null),this.geoXMLObj=new geoXML3.parser({map:this.map,zoom:!0}),this.geoXMLObj.parseKmlString("<Placemark>"+e.stateKML+"</Placemark>"),this.geoXMLObj.docs[0].gpolygons[0].setMap(this.map),this.geoXMLObj.docs[0].gpolygons[0].setOptions({fillColor:"gray",strokeColor:"gray",fillOpacity:.8,clickable:!1}),this.filterMarkers(this.geoXMLObj.docs[0].gpolygons[0])}},t.prototype.filterMarkers=function(t){var e=this;this.markers.forEach(function(n){n.setMap(e.map),e.isMarkerInRegion(t,n)||n.setMap(null)})},t.prototype.isMarkerInRegion=function(t,e){var n,r=0,o=!1,i=e.getPosition().lng(),s=e.getPosition().lat(),a=t.getPaths().getArray();if(a.length>1){var l=0;a.forEach(function(t){l<t.getLength()&&(l=t.getLength())}),n=a.find(function(t){return l===t.getLength()})}else n=t.getPath();for(var c=0;c<n.getLength();c++)++r==n.getLength()&&(r=0),(n.getAt(c).lat()<s&&n.getAt(r).lat()>=s||n.getAt(r).lat()<s&&n.getAt(c).lat()>=s)&&n.getAt(c).lng()+(s-n.getAt(c).lat())/(n.getAt(r).lat()-n.getAt(c).lat())*(n.getAt(r).lng()-n.getAt(c).lng())<i&&(o=!o);return o},t}());window.initMap=function(){var t=function(){"undefined"!=typeof $?$(document).ready(function(){new z(new R)}):setTimeout(function(){t()},200)};t()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,